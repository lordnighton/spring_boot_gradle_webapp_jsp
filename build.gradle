import com.gradle.helpers.GradlePrinter;

buildscript {
	ext {
		springBootVersion = '2.0.4.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

bootRun {
	jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n"]
	args += ["--server.port=8000"]
}

war {
	baseName = 'spring-boot-gradle-webapp-example'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

task props << {
    println("My property = " + project.external)
}

task beforePrint {
	doFirst {
		println "Before print"
	}
}

class VersionSpecifier {
	Integer major;
	Integer minor;

	VersionSpecifier(Integer major, Integer minor) {
		this.major = major
		this.minor = minor
	}

	@Override
	String toString() {
		"Major = $major, Minor = $minor"
	}
}

version = new VersionSpecifier(1,0)

task printVersion(dependsOn: [beforePrint]) {
	group = 'Versioning'
	description = 'Printing the version of a project'

	doLast {
		println "Project version = $version"
		logger.quiet "Logging the version = $version"
	}
}

task printLocalCacheDirs << {
	configurations.getByName('compile').each { dep -> 
		println dep
	}
}

task printBuildName << {
	GradlePrinter.printBuildName();
}

project.ext.fileToRead = file('fileToRead.txt')

task readFile() << {
	logger.quiet "Reading the file $project.fileToRead"

	if (project.fileToRead.exists()) {
		println "Exists"
		String fileContents = project.fileToRead.text
		println "Contents => [ $fileContents ]"
	} else {
		throw new GradleException("File not found -- $project.fileToRead")
	}
}

task packBundle(type: Zip) {
	archiveName 'bundle.zip'
	destinationDir = file("${projectDir}/dist")

	from "${projectDir}/src"

	doLast {
		println "Bundling is over"
	}
}

task removeDist(type: Delete) {
	delete = "${projectDir}/dist"
  	followSymlinks = true
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-devtools')
	compile('org.apache.commons:commons-lang3:3.0')
	compile('javax.servlet:jstl')

	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	providedRuntime('org.apache.tomcat.embed:tomcat-embed-jasper')
}
